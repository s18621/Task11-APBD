// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task11.Models;

namespace Task11.Migrations
{
    [DbContext(typeof(s18621Context))]
    [Migration("20200525213316_DataBaseTables")]
    partial class DataBaseTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Task11.Models.Doctor", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdDoctor")
                        .HasName("Doctor_PK");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            IdDoctor = 1,
                            Email = "kefirek@o2.com",
                            FirstName = "Kamil",
                            LastName = "Firek"
                        },
                        new
                        {
                            IdDoctor = 2,
                            Email = "ajax@gmail.com",
                            FirstName = "Andrzej",
                            LastName = "Jakis"
                        },
                        new
                        {
                            IdDoctor = 3,
                            Email = "oewf@interia.pl",
                            FirstName = "Michal",
                            LastName = "Jest"
                        });
                });

            modelBuilder.Entity("Task11.Models.Medicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdMedicament")
                        .HasName("Medicament_PK");

                    b.ToTable("Medicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            Description = "Disinfect wound",
                            Name = "Octanisept",
                            Type = "liquid"
                        },
                        new
                        {
                            IdMedicament = 2,
                            Description = "For really strong pain",
                            Name = "Paracetamol",
                            Type = "painkiller"
                        },
                        new
                        {
                            IdMedicament = 3,
                            Description = "Noc",
                            Name = "Apap",
                            Type = "painkiller"
                        });
                });

            modelBuilder.Entity("Task11.Models.Patient", b =>
                {
                    b.Property<int>("IdPatient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("IdPatient")
                        .HasName("Patient_PK");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            IdPatient = 1,
                            BirthDate = new DateTime(1990, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michal",
                            LastName = "Kowalski"
                        },
                        new
                        {
                            IdPatient = 2,
                            BirthDate = new DateTime(1952, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Adam",
                            LastName = "Nowak"
                        },
                        new
                        {
                            IdPatient = 3,
                            BirthDate = new DateTime(2000, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Piotr",
                            LastName = "Oten"
                        });
                });

            modelBuilder.Entity("Task11.Models.Prescription", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.HasKey("IdPrescription")
                        .HasName("Prescription_PK");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            IdPrescription = 1,
                            Date = new DateTime(2020, 6, 15, 23, 33, 16, 414, DateTimeKind.Local).AddTicks(7942),
                            DueDate = new DateTime(2020, 7, 1, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(5936),
                            IdDoctor = 5,
                            IdPatient = 1
                        },
                        new
                        {
                            IdPrescription = 2,
                            Date = new DateTime(2020, 6, 15, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7101),
                            DueDate = new DateTime(2020, 7, 1, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7125),
                            IdDoctor = 4,
                            IdPatient = 2
                        },
                        new
                        {
                            IdPrescription = 3,
                            Date = new DateTime(2020, 6, 15, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7146),
                            DueDate = new DateTime(2020, 7, 1, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7149),
                            IdDoctor = 3,
                            IdPatient = 3
                        },
                        new
                        {
                            IdPrescription = 4,
                            Date = new DateTime(2020, 6, 15, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7153),
                            DueDate = new DateTime(2020, 7, 1, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7156),
                            IdDoctor = 2,
                            IdPatient = 4
                        },
                        new
                        {
                            IdPrescription = 5,
                            Date = new DateTime(2020, 6, 15, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7159),
                            DueDate = new DateTime(2020, 7, 1, 23, 33, 16, 419, DateTimeKind.Local).AddTicks(7161),
                            IdDoctor = 1,
                            IdPatient = 5
                        });
                });

            modelBuilder.Entity("Task11.Models.PrescriptionMedicament", b =>
                {
                    b.Property<int>("IdMedicament")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.HasKey("IdMedicament", "IdPrescription");

                    b.HasIndex("IdPrescription");

                    b.ToTable("PrescriptionMedicament");

                    b.HasData(
                        new
                        {
                            IdMedicament = 1,
                            IdPrescription = 3,
                            Details = "Once a day",
                            Dose = 4
                        },
                        new
                        {
                            IdMedicament = 3,
                            IdPrescription = 2,
                            Details = "Twice a day",
                            Dose = 15
                        },
                        new
                        {
                            IdMedicament = 2,
                            IdPrescription = 1,
                            Details = "Once a week",
                            Dose = 12
                        });
                });

            modelBuilder.Entity("Task11.Models.Prescription", b =>
                {
                    b.HasOne("Task11.Models.Doctor", "Doctor")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdDoctor")
                        .HasConstraintName("Prescription-Doctor")
                        .IsRequired();

                    b.HasOne("Task11.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("IdPatient")
                        .HasConstraintName("Prescription-Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("Task11.Models.PrescriptionMedicament", b =>
                {
                    b.HasOne("Task11.Models.Medicament", "Medicament")
                        .WithMany("PrescriptionMedicament")
                        .HasForeignKey("IdMedicament")
                        .HasConstraintName("Medicament-Prescription_Medicament")
                        .IsRequired();

                    b.HasOne("Task11.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedicament")
                        .HasForeignKey("IdPrescription")
                        .HasConstraintName("Prescription_Prescription_Medicament")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
